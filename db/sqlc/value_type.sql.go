// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: value_type.sql

package db

import (
	"context"
	"database/sql"
)

const createValueType = `-- name: CreateValueType :one
INSERT INTO value_types (
  name,
  description,
  unit,
  user_id,
  target,
  min,
  max
) VALUES (
  $1, 
  $2, 
  $3,
  $4,
  $5,
  $6,
  $7
) 
RETURNING id, name, description, unit, user_id, target, min, max, created_at
`

type CreateValueTypeParams struct {
	Name        string          `json:"name"`
	Description sql.NullString  `json:"description"`
	Unit        string          `json:"unit"`
	UserID      int64           `json:"user_id"`
	Target      sql.NullFloat64 `json:"target"`
	Min         sql.NullFloat64 `json:"min"`
	Max         sql.NullFloat64 `json:"max"`
}

func (q *Queries) CreateValueType(ctx context.Context, arg CreateValueTypeParams) (ValueType, error) {
	row := q.db.QueryRowContext(ctx, createValueType,
		arg.Name,
		arg.Description,
		arg.Unit,
		arg.UserID,
		arg.Target,
		arg.Min,
		arg.Max,
	)
	var i ValueType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Unit,
		&i.UserID,
		&i.Target,
		&i.Min,
		&i.Max,
		&i.CreatedAt,
	)
	return i, err
}

const getValueType = `-- name: GetValueType :one
SELECT id, name, description, unit, user_id, target, min, max, created_at FROM value_types
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetValueType(ctx context.Context, id int64) (ValueType, error) {
	row := q.db.QueryRowContext(ctx, getValueType, id)
	var i ValueType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Unit,
		&i.UserID,
		&i.Target,
		&i.Min,
		&i.Max,
		&i.CreatedAt,
	)
	return i, err
}

const getValueTypeByName = `-- name: GetValueTypeByName :one
SELECT id, name, description, unit, user_id, target, min, max, created_at FROM value_types
WHERE user_id = $1 AND name = $2
LIMIT 1
`

type GetValueTypeByNameParams struct {
	UserID int64  `json:"user_id"`
	Name   string `json:"name"`
}

func (q *Queries) GetValueTypeByName(ctx context.Context, arg GetValueTypeByNameParams) (ValueType, error) {
	row := q.db.QueryRowContext(ctx, getValueTypeByName, arg.UserID, arg.Name)
	var i ValueType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Unit,
		&i.UserID,
		&i.Target,
		&i.Min,
		&i.Max,
		&i.CreatedAt,
	)
	return i, err
}
