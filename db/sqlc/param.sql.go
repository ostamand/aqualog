// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: param.sql

package db

import (
	"context"
)

const createParam = `-- name: CreateParam :one
INSERT INTO params (
  user_id,
  param_type_id,
  value
) VALUES (
  $1,
  $2,
  $3
) 
RETURNING id, user_id, param_type_id, value, created_at
`

type CreateParamParams struct {
	UserID      int64   `json:"user_id"`
	ParamTypeID int64   `json:"param_type_id"`
	Value       float64 `json:"value"`
}

func (q *Queries) CreateParam(ctx context.Context, arg CreateParamParams) (Param, error) {
	row := q.db.QueryRowContext(ctx, createParam, arg.UserID, arg.ParamTypeID, arg.Value)
	var i Param
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ParamTypeID,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const getParam = `-- name: GetParam :one
SELECT id, user_id, param_type_id, value, created_at FROM params
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetParam(ctx context.Context, id int64) (Param, error) {
	row := q.db.QueryRowContext(ctx, getParam, id)
	var i Param
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ParamTypeID,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}
